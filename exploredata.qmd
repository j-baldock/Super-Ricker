---
title: "Explore data"
format: html
toc: true
toc-depth: 4
---

```{r}
library(tidyverse)
library(ggmcmc)
library(R2jags)
```

## Redd counts

Load data and calculate rate of superimposition as the (average) number of redds divided by the number of clusters, where each cluster contains 1+ redd. See Baldock *et al.* (2023, CJFAS) for details on historical redd count program. The rate of superimposition (*sup*) thus represents the degree to which redds are clustered within each year and stream, with higher values indicating increased rates of clustering/superimposition (minimum value = 1). 

Based on the past study, we know that observers both underestimate the number of clusters (detection probability = 0.65) and overestimate the number of redds per cluster. But these antagonistic error sources cancel each other out, such that observed redd counts accurately reflect census redd abundance. Thus, we could correct *clusters* by detection probability (divide by 0.65), while retaining the raw *avgredds* data. But this would affect all years and populations equally, and so relative rates of superimposition among streams and years would be the same. Thus, no sense in correcting. 

Nevertheless, the ~complex error structure assocaited with redd count data begs the question of the utility of redd count data alone for describing rates of superimposition. A likely better way to describe superimposition would be something like #females per redd or per cluster, but we only have independent spawner/female abundance data for a single stream, Lower Bar BC. 
```{r}
dat_rc <- read_csv("data/ReddCounts_WGFD_1971-2021_cleaned.csv") %>%
  filter(!stream %in% c("Cody", "Christiansen", "Dave", "Laker")) %>% 
  mutate(sup = avgredds / clusters) %>%
  group_by(stream) %>%
  complete(year = min(year):max(year)) %>%
  ungroup()
head(dat_rc)
```


View distributions of superimposition rate by population
```{r}
dat_rc %>%
  ggplot() +
  geom_boxplot(aes(x = stream, y = sup), fill = "grey80") +
  xlab("Population") + ylab("Rate of superimposition\n(avg. redds / clusters)") +
  theme_bw() + 
  theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

log-scale
```{r}
dat_rc %>%
  ggplot() +
  geom_boxplot(aes(x = stream, y = log(sup)), fill = "grey80") +
  xlab("Population") + ylab("(log) Rate of superimposition\n(avg. redds / clusters)") +
  theme_bw() + 
  theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

View time series of superimposition rates: lots of variation both within and among streams
```{r fig.width = 8, fig.height=7}
dat_rc %>%
  ggplot(aes(x = year, y = sup)) +
  geom_point() +
  geom_line() +
  facet_wrap(~stream) +
  xlab("Year") + ylab("Rate of superimposition\n(avg. redds / cluster)") +
  theme_bw() + theme(panel.grid.minor = element_blank())
```


Are rates of superimposition related to redd density? *Sorta hokey b/c both superimposition rate and redd density are both calculated using avgredds*

Among populations with LOESS
```{r}
dat_rc %>%
  ggplot() +
  geom_smooth(aes(x = reddsperkm, y = sup), color = "black") +
  geom_point(aes(x = reddsperkm, y = sup, color = stream)) +
  #geom_line() +
  #facet_wrap(~stream) +
  xlab("Redds per km") + ylab("Rate of superimposition\n(avg. redds / clusters)") +
  theme_bw() + theme(panel.grid = element_blank()) #+
  #ggpubr::stat_cor()
```

By stream with linear regression smoothers
```{r fig.width = 8, fig.height=7}
dat_rc %>%
  ggplot(aes(x = reddsperkm, y = sup)) +
  geom_point(aes(color = stream)) +
  geom_smooth(method = "lm", color = "grey40") +
  #geom_line() +
  facet_wrap(~stream, scales = "free") +
  xlab("Redds per km") + ylab("Rate of superimposition\n(avg. redds / clusters)") +
  theme_bw() + theme(panel.grid = element_blank(), legend.position = "none") +
  ggpubr::stat_cor()
```


### Validate coarse metrics

Annual redd count data (*avgredds* and *clusters*) are summarized from spawning ground surveys where observers first map redd clusters then estimate the number of redds in each cluster. Annual rates of superimposition can more ~accurately be estimated from these maps by first calculating the rate of superimposition for each cluster, then averaging over all clusters. I previously digitized maps for two streams: Lower Bar BC and Upper Bar BC. Calculate annual superimposition rates (mean and variance) from these data then compare to the "coarse" metrics derived from summarized redd count data. Make sure we see a linear/1:1 relationship

Load data and summarize by stream and year.
```{r}
dat_maps <- read_csv("data/WGFD Historical redd maps digitized.csv") %>%
  filter(section == "main") %>% 
  mutate(stream = recode(stream, "lower" = "Lower Bar BC",  "upper" = "Upper Bar BC"),
         rpc = rowMeans(select(., min, max))) %>%
  group_by(stream, year) %>%
  summarize(rpc_mean = mean(rpc),
            rpc_025 = quantile(rpc, probs = 0.025, na.rm = TRUE),
            rpc_975 = quantile(rpc, probs = 0.975, na.rm = TRUE)) %>%
  ungroup()
dat_maps
```

View time series
```{r}
dat_maps %>% 
  ggplot() +
  geom_point(aes(x = year, y = rpc_mean)) +
  geom_errorbar(aes(x = year, ymin = rpc_025, ymax = rpc_975)) +
  facet_wrap(~stream, nrow = 2) + 
  theme_bw() + theme(panel.grid = element_blank()) +
  xlab("Year") + ylab("Redds per cluster, mean and 95% quantile interval")
```

Compare with coarse metrics
```{r}
dat_maps %>% 
  left_join(dat_rc %>% select(stream, year, sup)) %>%
  ggplot(aes(x = rpc_mean, y = sup)) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~stream) + 
  theme_bw() + theme(panel.grid = element_blank()) +
  xlab("Mean redds per cluster (maps)") + ylab("Rate of superimpostion (summarized)")
```

*Good news, rates of superimposition derived from the summarized data accurately and ~precisely reflect mean rates of superimposition derived from the more detailed redd mapping efforts.*


## Ricker b

Population order and short names
```{r}
nametib <- tibble(Population = c(1:13),
                  stream = unique(dat_rc$stream),
                  stream_short = c("THCH", "BLKT", "BLCR", "COCA", "FISH", "FLAT", "LTBC", "LOBC", "NOWL", "PRCE", "SRSC", "SPRG", "UPBC"))
nametib
```


Load fitted YCT Ricker stock-recruit model and coerce to ggs object
```{r}
mod_01pb <- readRDS("C:/Users/jbaldock/OneDrive - DOI/Documents/WyACT/YCT-ReddCounts-Ricker/Model output/ReddCountsRicker_Phase1_Age01p_winvar_AgeSpecMgdPeakMag.RDS")
mod_gg <- ggs(as.mcmc(mod_01pb), keep_original_order = TRUE)
```

Get Ricker b's and summarize: posterior mean and 95% credible intervals
```{r}
mod_gg_B <- mod_gg %>% 
  filter(Parameter %in% paste("B[", 1:13, "]", sep = "")) %>%
  mutate(Population = parse_number(as.character(Parameter))) %>%
  left_join(nametib)

mod_gg_B_summ <- mod_gg_B %>%
  group_by(Population, stream, stream_short) %>%
  summarize(B_mean = mean(value),
            B_025 = quantile(value, probs = 0.025),
            B_975 = quantile(value, probs = 0.975)) %>%
  ungroup()
```

Plot posterior means and 95% credible intervals
```{r}
mod_gg_B_summ %>%
  ggplot() +
  geom_point(aes(x = stream, y = B_mean)) +
  geom_errorbar(aes(x = stream, ymin = B_025, ymax = B_975), width = 0.2) +
  xlab("Population") + ylab("Ricker b (posterior mean and 95% CI)") +
  theme_bw() + 
  theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```


## Compare

### All data

Summarize superimposition data and join with summarized Ricker b's
```{r}
supricker <- dat_rc %>%
  # filter(year < 2000) %>%
  group_by(stream) %>%
  summarize(sup_med = median(sup, na.rm = TRUE),
            sup_025 = quantile(sup, probs = 0.25, na.rm = TRUE),
            sup_975 = quantile(sup, probs = 0.75, na.rm = TRUE),
            logsup_med = median(log(sup), na.rm = TRUE),
            logsup_025 = quantile(log(sup), probs = 0.25, na.rm = TRUE),
            logsup_975 = quantile(log(sup), probs = 0.75, na.rm = TRUE)) %>%
  ungroup() %>%
  left_join(mod_gg_B_summ)
supricker
```

Plot relationship with error bars
```{r}
supricker %>%
  ggplot() + 
  geom_errorbar(aes(x = logsup_med, ymin = B_025, ymax = B_975), width = 0.02, color = "grey50") +
  geom_errorbarh(aes(xmin = logsup_025, xmax = logsup_975, y = B_mean), height = 0.002, color = "grey50") +
  geom_point(aes(x = logsup_med, y = B_mean), size = 2) +
  xlab("(log) Rate of superimposition, median and 50% quantile interval") + ylab("Ricker b, posterior mean and 95% credible interval") +
  theme_bw() + theme(panel.grid = element_blank())
```

With labels
```{r}
supricker %>%
  ggplot(aes(x = logsup_med, y = B_mean)) + 
  geom_point(size = 2) +
  geom_text(aes(label = stream_short), vjust = 1.5) +
  xlab("(log) Rate of superimposition, median") + ylab("Ricker b, posterior mean") +
  theme_bw() + theme(panel.grid = element_blank())
```



### Pre-2000

Only use redd count data prior to 2000 to calculate population-level median rate of superimposition

Summarize superimposition data and join with summarized Ricker b's
```{r}
supricker <- dat_rc %>%
  filter(year < 2000) %>%
  group_by(stream) %>%
  summarize(sup_med = median(sup, na.rm = TRUE),
            sup_025 = quantile(sup, probs = 0.25, na.rm = TRUE),
            sup_975 = quantile(sup, probs = 0.75, na.rm = TRUE),
            logsup_med = median(log(sup), na.rm = TRUE),
            logsup_025 = quantile(log(sup), probs = 0.25, na.rm = TRUE),
            logsup_975 = quantile(log(sup), probs = 0.75, na.rm = TRUE)) %>%
  ungroup() %>%
  left_join(mod_gg_B_summ)
supricker
```

Plot relationship with error bars
```{r}
supricker %>%
  ggplot() + 
  geom_errorbar(aes(x = logsup_med, ymin = B_025, ymax = B_975), width = 0.02, color = "grey50") +
  geom_errorbarh(aes(xmin = logsup_025, xmax = logsup_975, y = B_mean), height = 0.002, color = "grey50") +
  geom_point(aes(x = logsup_med, y = B_mean), size = 2) +
  xlab("(log) Rate of superimposition, median and 50% quantile interval") + ylab("Ricker b, posterior mean and 95% credible interval") +
  theme_bw() + theme(panel.grid = element_blank())
```

With labels
```{r}
supricker %>%
  ggplot(aes(x = logsup_med, y = B_mean)) + 
  geom_point(size = 2) +
  geom_text(aes(label = stream_short), vjust = 1.5) +
  xlab("(log) Rate of superimposition, median") + ylab("Ricker b, posterior mean") +
  theme_bw() + theme(panel.grid = element_blank())
```


### Post-2000

Only use redd count data after 2000 to calculate population-level median rate of superimposition

Summarize superimposition data and join with summarized Ricker b's
```{r}
supricker <- dat_rc %>%
  filter(year >= 2000) %>%
  group_by(stream) %>%
  summarize(sup_med = median(sup, na.rm = TRUE),
            sup_025 = quantile(sup, probs = 0.25, na.rm = TRUE),
            sup_975 = quantile(sup, probs = 0.75, na.rm = TRUE),
            logsup_med = median(log(sup), na.rm = TRUE),
            logsup_025 = quantile(log(sup), probs = 0.25, na.rm = TRUE),
            logsup_975 = quantile(log(sup), probs = 0.75, na.rm = TRUE)) %>%
  ungroup() %>%
  left_join(mod_gg_B_summ)
supricker
```

Plot relationship with error bars
```{r}
supricker %>%
  ggplot() + 
  geom_errorbar(aes(x = logsup_med, ymin = B_025, ymax = B_975), width = 0.02, color = "grey50") +
  geom_errorbarh(aes(xmin = logsup_025, xmax = logsup_975, y = B_mean), height = 0.002, color = "grey50") +
  geom_point(aes(x = logsup_med, y = B_mean), size = 2) +
  xlab("(log) Rate of superimposition, median and 50% quantile interval") + ylab("Ricker b, posterior mean and 95% credible interval") +
  theme_bw() + theme(panel.grid = element_blank())
```

With labels
```{r}
supricker %>%
  ggplot(aes(x = logsup_med, y = B_mean)) + 
  geom_point(size = 2) +
  geom_text(aes(label = stream_short), vjust = 1.5) +
  xlab("(log) Rate of superimposition, median") + ylab("Ricker b, posterior mean") +
  theme_bw() + theme(panel.grid = element_blank())
```





